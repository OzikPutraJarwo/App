// ----- Database -----

const database = [
  {
    title: "Sunlight",
    wave: "350:0.000829,351:0.000829,352:0.000829,353:0.000614,354:0.001161,355:0.002863,356:0.005809,357:0.006871,358:0.005652,359:0.002716,360:0.000873,361:0.000122,362:0.000191,363:0.000483,364:0.000957,365:0.001107,366:0.000877,367:0.000395,368:0.000103,369:0,370:0.001127,371:0.003629,372:0.007567,373:0.012081,374:0.016924,375:0.020133,376:0.019874,377:0.016146,378:0.012823,379:0.011647,380:0.01264,381:0.013881,382:0.015195,383:0.016227,384:0.016761,385:0.016929,386:0.019701,387:0.025242,388:0.032121,389:0.035983,390:0.03683,391:0.039278,392:0.045777,393:0.056116,394:0.066181,395:0.075238,396:0.08469,397:0.096116,398:0.109517,399:0.123672,400:0.137799,401:0.151784,402:0.165489,403:0.178912,404:0.193406,405:0.20943,406:0.227142,407:0.245876,408:0.26534,409:0.284106,410:0.30087,411:0.315818,412:0.333712,413:0.355288,414:0.380491,415:0.405976,416:0.431742,417:0.459631,418:0.489723,419:0.523408,420:0.561587,421:0.604032,422:0.652521,423:0.705183,424:0.762971,425:0.826612,426:0.895102,427:0.975742,428:1.069323,429:1.176504,430:1.29626,431:1.423905,432:1.56303,433:1.710126,434:1.865191,435:2.04468,436:2.245146,437:2.469514,438:2.700734,439:2.938531,440:3.190481,441:3.454012,442:3.729458,443:4.006876,444:4.285188,445:4.5413,446:4.770442,447:4.955302,448:5.081656,449:5.153717,450:5.159415,451:5.128311,452:5.046811,453:4.909682,454:4.724354,455:4.497262,456:4.260879,457:4.018404,458:3.785965,459:3.565697,460:3.366094,461:3.181874,462:3.017833,463:2.875788,464:2.752048,465:2.64317,466:2.536049,467:2.432849,468:2.337806,469:2.250514,470:2.176202,471:2.111192,472:2.056479,473:2.006834,474:1.960347,475:1.927385,476:1.907954,477:1.90309,478:1.903201,479:1.906119,480:1.918535,481:1.939504,482:1.968503,483:1.997146,484:2.024608,485:2.051619,486:2.07884,487:2.112237,488:2.156781,489:2.212021,490:2.267396,491:2.317728,492:2.365605,493:2.416787,494:2.47057,495:2.522167,496:2.570414,497:2.618357,498:2.669305,499:2.721961,500:2.771599,501:2.817555,502:2.861298,503:2.905224,504:2.947429,505:2.985943,506:3.020563,507:3.051534,508:3.080656,509:3.115265,510:3.160142,511:3.21057,512:3.248109,513:3.269641,514:3.278394,515:3.28549,516:3.295944,517:3.31611,518:3.345711,519:3.37651,520:3.403638,521:3.429394,522:3.457649,523:3.489982,524:3.527285,525:3.568911,526:3.604877,527:3.632397,528:3.655401,529:3.684592,530:3.718683,531:3.750173,532:3.776758,533:3.794846,534:3.807566,535:3.819072,536:3.837449,537:3.862226,538:3.886081,539:3.905854,540:3.916018,541:3.918914,542:3.923373,543:3.942947,544:3.975616,545:4.002859,546:4.017568,547:4.02879,548:4.046854,549:4.068584,550:4.085609,551:4.096185,552:4.100739,553:4.101438,554:4.105637,555:4.116181,556:4.127993,557:4.132531,558:4.127997,559:4.116894,560:4.102926,561:4.09879,562:4.107059,563:4.115149,564:4.109842,565:4.095725,566:4.087568,567:4.086459,568:4.085063,569:4.079826,570:4.073052,571:4.06749,572:4.062774,573:4.057637,574:4.053239,575:4.050965,576:4.051967,577:4.057825,578:4.066779,579:4.060628,580:4.036632,581:4.010265,582:4.002228,583:4.005692,584:4.000913,585:3.984046,586:3.9614,587:3.937777,588:3.912432,589:3.885882,590:3.870713,591:3.868875,592:3.872174,593:3.865124,594:3.850812,595:3.840993,596:3.837357,597:3.833179,598:3.824941,599:3.81427,600:3.803883,601:3.798576,602:3.798252,603:3.789628,604:3.764482,605:3.727186,606:3.693686,607:3.665244,608:3.634917,609:3.601798,610:3.571919,611:3.546697,612:3.51912,613:3.485197,614:3.440909,615:3.391511,616:3.346637,617:3.312622,618:3.282602,619:3.244715,620:3.200739,621:3.159418,622:3.122974,623:3.088227,624:3.05341,625:3.018795,626:2.984269,627:2.9492,628:2.912873,629:2.873079,630:2.830461,631:2.786879,632:2.744746,633:2.705755,634:2.668586,635:2.633346,636:2.598226,637:2.563406,638:2.528814,639:2.494187,640:2.459263,641:2.420521,642:2.376688,643:2.327138,644:2.274955,645:2.223884,646:2.176225,647:2.136391,648:2.105645,649:2.073316,650:2.026088,651:1.971516,652:1.931678,653:1.909396,654:1.885063,655:1.847865,656:1.807447,657:1.772117,658:1.739285,659:1.706727,660:1.676212,661:1.650131,662:1.63077,663:1.61286,664:1.588388,665:1.557215,666:1.527849,667:1.504912,668:1.483304,669:1.457686,670:1.428684,671:1.401045,672:1.378545,673:1.360373,674:1.342189,675:1.319673,676:1.293443,677:1.267662,678:1.245265,679:1.227049,680:1.210358,681:1.190932,682:1.16791,683:1.145459,684:1.127249,685:1.110409,686:1.090155,687:1.068681,688:1.050196,689:1.037664,690:1.027767,691:1.020891,692:1.016059,693:1.018094,694:1.024331,695:1.029148,696:1.030724,697:1.035201,698:1.046375,699:1.060699,700:1.075597,701:1.092396,702:1.107813,703:1.119343,704:1.138277,705:1.168353,706:1.202582,707:1.229764,708:1.252673,709:1.277268,710:1.299717,711:1.314082,712:1.319834,713:1.317705,714:1.310054,715:1.294891,716:1.274294,717:1.251844,718:1.231828,719:1.213953,720:1.203999,721:1.211337,722:1.229701,723:1.247463,724:1.262297,725:1.282298,726:1.315158,727:1.353167,728:1.39327,729:1.441999,730:1.508826,731:1.587271,732:1.66387,733:1.723645,734:1.77908,735:1.843105,736:1.91457,737:1.982884,738:2.046154,739:2.112731,740:2.173251,741:2.219554,742:2.251832,743:2.284632,744:2.316758,745:2.348504,746:2.379886,747:2.407044,748:2.430243,749:2.452096,750:2.467197,751:2.471606,752:2.463237,753:2.449379,754:2.429109,755:2.382687,756:2.306136,757:2.197795,758:2.079514,759:1.959889,760:1.851747,761:1.759338,762:1.704232,763:1.687662,764:1.713307,765:1.781739,766:1.885419,767:2.005886,768:2.120064,769:2.227071,770:2.327094,771:2.409251,772:2.456173,773:2.481304,774:2.495418,775:2.512471,776:2.523685,777:2.524951,778:2.531568,779:2.535567,780:2.521289,781:2.50074,782:2.485845,783:2.478966,784:2.461107,785:2.434427,786:2.411746,787:2.388213,788:2.362326,789:2.336062,790:2.312189,791:2.293828,792:2.281529,793:2.272592,794:2.26455,795:2.274268,796:2.290043,797:2.30745,798:2.31072,799:2.31072,800:2.31072"
  },
  {
    title: "LED Bar",
    wave: "350:0,351:0,352:0,353:0,354:0,355:0,356:0,357:0,358:0,359:0,360:0,361:0,362:0,363:0,364:0,365:0,366:0,367:0.002239,368:0.009345,369:0.02132,370:0.027942,371:0.024822,372:0.013364,373:0.007852,374:0.010049,375:0.015441,376:0.015162,377:0.009212,378:0.003304,379:0.000233,380:0,381:0,382:0,383:0.001162,384:0.004065,385:0.008544,386:0.010117,387:0.008205,388:0.003727,389:0.000992,390:0,391:0,392:0,393:0,394:0,395:0,396:0,397:0,398:0,399:0,400:0,401:0,402:0,403:0,404:0.006513,405:0.021065,406:0.047419,407:0.092419,408:0.15454,409:0.231372,410:0.310339,411:0.391809,412:0.481368,413:0.57823,414:0.695533,415:0.841463,416:1.01602,417:1.235537,418:1.488321,419:1.793945,420:2.163008,421:2.592081,422:3.081688,423:3.597761,424:4.15669,425:4.805337,426:5.537333,427:6.392744,428:7.336645,429:8.377509,430:9.551933,431:10.827882,432:12.27182,433:13.856348,434:15.581459,435:17.647585,436:19.992746,437:22.710327,438:25.641577,439:28.782827,440:32.363403,441:36.299877,442:40.649326,443:45.184891,444:49.873386,445:54.515724,446:58.989742,447:63.075413,448:66.444618,449:69.12365,450:70.536423,451:70.951813,452:70.18914,453:68.584518,454:66.339249,455:63.375134,456:60.07494,457:56.468956,458:52.900871,459:49.447899,460:46.264889,461:43.325382,462:40.687828,463:38.331795,464:36.198883,465:34.294285,466:32.472507,467:30.759394,468:29.158045,469:27.649269,470:26.287672,471:25.027298,472:23.897594,473:22.882223,474:21.960396,475:21.262653,476:20.755461,477:20.478281,478:20.338556,479:20.305738,480:20.375393,481:20.483841,482:20.666197,483:20.931633,484:21.276413,485:21.691128,486:22.131901,487:22.600035,488:23.070942,489:23.545172,490:24.030556,491:24.525976,492:25.027561,493:25.524546,494:26.019539,495:26.525303,496:27.043461,497:27.534004,498:27.976553,499:28.367775,500:28.738932,501:29.10062,502:29.428337,503:29.726137,504:29.978046,505:30.196817,506:30.382381,507:30.531937,508:30.66058,509:30.78841,510:30.942039,511:31.104523,512:31.217319,513:31.272591,514:31.286444,515:31.299353,516:31.314711,517:31.336651,518:31.370739,519:31.453184,520:31.5807,521:31.724255,522:31.836021,523:31.921215,524:32.01244,525:32.117939,526:32.247547,527:32.392281,528:32.554333,529:32.719933,530:32.878746,531:33.000923,532:33.085182,533:33.19622,534:33.366638,535:33.567825,536:33.723595,537:33.845913,538:34.021832,539:34.273125,540:34.521477,541:34.700592,542:34.837059,543:35.013676,544:35.223259,545:35.38797,546:35.486397,547:35.556728,548:35.65258,549:35.783092,550:35.931377,551:36.08429,552:36.205929,553:36.290047,554:36.36681,555:36.463287,556:36.606701,557:36.789925,558:36.989033,559:37.141109,560:37.235275,561:37.306278,562:37.389809,563:37.45126,564:37.472927,565:37.458759,566:37.445049,567:37.451458,568:37.505638,569:37.604263,570:37.727325,571:37.843243,572:37.958321,573:38.081268,574:38.221088,575:38.379894,576:38.542046,577:38.662575,578:38.737534,579:38.884533,580:39.139503,581:39.436874,582:39.658127,583:39.857277,584:40.135033,585:40.502151,586:40.897415,587:41.279793,588:41.643063,589:41.994415,590:42.384472,591:42.827068,592:43.313736,593:43.792377,594:44.27721,595:44.792557,596:45.349209,597:45.944302,598:46.557327,599:47.15456,600:47.72102,601:48.264088,602:48.809956,603:49.393021,604:50.019321,605:50.713009,606:51.453972,607:52.203644,608:52.903736,609:53.524265,610:54.06028,611:54.559513,612:55.108948,613:55.743565,614:56.459866,615:57.186535,616:57.86871,617:58.488689,618:59.046181,619:59.595779,620:60.14217,621:60.683952,622:61.176586,623:61.578751,624:61.910091,625:62.243298,626:62.614368,627:62.98468,628:63.316589,629:63.575298,630:63.787224,631:64.022232,632:64.323303,633:64.617683,634:64.84494,635:64.97551,636:65.073578,637:65.07312,638:64.990608,639:64.902534,640:64.898033,641:64.908257,642:64.823685,643:64.596489,644:64.294411,645:64.018112,646:63.838909,647:63.703529,648:63.488434,649:63.152672,650:62.769394,651:62.3834,652:61.972744,653:61.524891,654:61.044743,655:60.545177,656:60.027908,657:59.513756,658:59.024418,659:58.52655,660:57.946648,661:57.26881,662:56.535202,663:55.825569,664:55.166451,665:54.549164,666:53.948055,667:53.323959,668:52.667053,669:51.970028,670:51.223595,671:50.465302,672:49.736565,673:49.016769,674:48.242653,675:47.404442,676:46.556549,677:45.766239,678:45.035591,679:44.307919,680:43.532928,681:42.766983,682:42.084122,683:41.425552,684:40.691757,685:39.812504,686:38.863136,687:37.976425,688:37.199612,689:36.537319,690:35.878441,691:35.191109,692:34.484322,693:33.78611,694:33.107529,695:32.415192,696:31.687387,697:30.941116,698:30.230694,699:29.57555,700:28.93997,701:28.281265,702:27.569065,703:26.832485,704:26.142944,705:25.516279,706:25.00639,707:24.533749,708:24.01561,709:23.406202,710:22.738375,711:22.095835,712:21.479628,713:20.898458,714:20.349598,715:19.851664,716:19.384842,717:18.903208,718:18.39716,719:17.909319,720:17.474365,721:17.071007,722:16.617073,723:16.098278,724:15.637458,725:15.273727,726:14.900017,727:14.437724,728:13.96712,729:13.585889,730:13.232828,731:12.851676,732:12.475877,733:12.11913,734:11.772152,735:11.461058,736:11.14222,737:10.759545,738:10.416192,739:10.186673,740:9.992595,741:9.701099,742:9.29252,743:8.938563,744:8.667175,745:8.4436,746:8.218293,747:7.974525,748:7.731523,749:7.476737,750:7.220224,751:6.985218,752:6.821751,753:6.688808,754:6.553095,755:6.374664,756:6.169844,757:5.9506,758:5.720049,759:5.481402,760:5.254406,761:5.051685,762:4.944334,763:4.874982,764:4.77978,765:4.578199,766:4.342388,767:4.211123,768:4.139543,769:4.068062,770:3.916146,771:3.736377,772:3.563591,773:3.401614,774:3.262284,775:3.18719,776:3.148599,777:3.122874,778:3.068682,779:2.981492,780:2.8425,781:2.683821,782:2.542801,783:2.480582,784:2.438765,785:2.383623,786:2.254853,787:2.13292,788:2.072865,789:2.085793,790:2.109614,791:2.097293,792:2.012243,793:1.881965,794:1.743062,795:1.672128,796:1.641053,797:1.631333,798:1.621925,799:1.621925,800:1.621925"
  },
];

const graph = document.querySelector('.graph');
const select = document.getElementById('select-spectrum');

database.forEach(item => {
  const wavelengthDiv = document.createElement('div');
  wavelengthDiv.className = 'wavelength';
  wavelengthDiv.setAttribute('data-title', item.title);
  wavelengthDiv.setAttribute('data-wave', item.wave);
  graph.appendChild(wavelengthDiv);

  const option = document.createElement('option');
  option.value = item.title;
  option.textContent = item.title;
  select.appendChild(option);
});

// ----- Utility Functions -----

const dataWrapper = document.getElementById('data');

let isChanged = false;

select.addEventListener('change', () => {
  isChanged = true;
  const value = select.value;
  const wavelengths = graph.querySelectorAll('.wavelength');
  wavelengths.forEach(wl => {
    wl.classList.toggle('active', wl.getAttribute('data-title') === value);
  });
  document.querySelector('.options').classList.remove('none');
  responsiveGraph('.wavelength.active');
  dataProcessing('.wavelength.active');
});

window.addEventListener('resize', () => {
  if (isChanged) {
    responsiveGraph('.wavelength.active');
  }
});

// ----- Graph Rendering -----

function responsiveGraph(className) {
  const container = document.querySelector(className);
  container.style.height = `100%`;
  container.innerHTML = '';
  drawWavelengthGraph(className);
};

function drawWavelengthGraph(className) {
  const container = document.querySelector(className);
  const title = container.getAttribute('data-title') || "Spectrum";
  const dataAttr = container.getAttribute('data-wave');
  const dataPairs = dataAttr.split(',').map(d => {
    const [wave, val] = d.trim().split(':').map(Number);
    return { wavelength: wave, value: val };
  }).filter(d => d.wavelength >= 350 && d.wavelength <= 800);

  const width = container.clientWidth;
  const height = container.clientHeight;
  const margin = { top: 10, right: 20, bottom: 50, left: 30 };
  const graphWidth = width - margin.left - margin.right;
  const graphHeight = height - margin.top - margin.bottom;

  const svg = d3.select(container)
    .append("svg")
    .attr("width", width)
    .attr("height", height);

  const g = svg.append("g")
    .attr("transform", `translate(${margin.left},${margin.top})`);

  const x = d3.scaleLinear()
    .domain([350, 800])
    .range([0, graphWidth]);

  const y = d3.scaleLinear()
    .domain([0, d3.max(dataPairs, d => d.value) * 1.1])
    .range([graphHeight, 0]);

  const gradientId = 'spectrum-' + Math.random().toString(36).substring(2, 9);
  const gradient = svg.append("defs")
    .append("linearGradient")
    .attr("id", gradientId)
    .attr("x1", "0%").attr("y1", "0%")
    .attr("x2", "100%").attr("y2", "0%");

  const colors = [
    { wavelength: 350, color: "rgb(0, 0, 0)" },
    { wavelength: 380, color: "rgb(97, 0, 97)" },
    { wavelength: 390, color: "rgb(121, 0, 141)" },
    { wavelength: 400, color: "rgb(131, 0, 181)" },
    { wavelength: 410, color: "rgb(126, 0, 219)" },
    { wavelength: 420, color: "rgb(106, 0, 255)" },
    { wavelength: 430, color: "rgb(61, 0, 255)" },
    { wavelength: 440, color: "rgb(0, 0, 255)" },
    { wavelength: 450, color: "rgb(0, 70, 255)" },
    { wavelength: 460, color: "rgb(0, 123, 255)" },
    { wavelength: 470, color: "rgb(0, 169, 255)" },
    { wavelength: 480, color: "rgb(0, 213, 255)" },
    { wavelength: 490, color: "rgb(0, 255, 255)" },
    { wavelength: 500, color: "rgb(0, 255, 146)" },
    { wavelength: 510, color: "rgb(0, 255, 0)" },
    { wavelength: 520, color: "rgb(54, 255, 0)" },
    { wavelength: 530, color: "rgb(94, 255, 0)" },
    { wavelength: 540, color: "rgb(129, 255, 0)" },
    { wavelength: 550, color: "rgb(163, 255, 0)" },
    { wavelength: 560, color: "rgb(195, 255, 0)" },
    { wavelength: 570, color: "rgb(225, 255, 0)" },
    { wavelength: 580, color: "rgb(255, 255, 0)" },
    { wavelength: 590, color: "rgb(255, 223, 0)" },
    { wavelength: 600, color: "rgb(255, 190, 0)" },
    { wavelength: 610, color: "rgb(255, 155, 0)" },
    { wavelength: 620, color: "rgb(255, 119, 0)" },
    { wavelength: 630, color: "rgb(255, 79, 0)" },
    { wavelength: 640, color: "rgb(255, 33, 0)" },
    { wavelength: 650, color: "rgb(250, 0, 0)" },
    { wavelength: 660, color: "rgb(241, 0, 0)" },
    { wavelength: 670, color: "rgb(232, 0, 0)" },
    { wavelength: 680, color: "rgb(223, 0, 0)" },
    { wavelength: 690, color: "rgb(214, 0, 0)" },
    { wavelength: 700, color: "rgb(205, 0, 0)" },
    { wavelength: 710, color: "rgb(196, 0, 0)" },
    { wavelength: 720, color: "rgb(187, 0, 0)" },
    { wavelength: 730, color: "rgb(177, 0, 0)" },
    { wavelength: 740, color: "rgb(168, 0, 0)" },
    { wavelength: 750, color: "rgb(158, 0, 0)" },
    { wavelength: 760, color: "rgb(148, 0, 0)" },
    { wavelength: 770, color: "rgb(138, 0, 0)" },
    { wavelength: 780, color: "rgb(128, 0, 0)" },
    { wavelength: 790, color: "rgb(118, 0, 0)" },
    { wavelength: 800, color: "rgb(107, 0, 0)" }
  ];

  colors.forEach(d => {
    gradient.append("stop")
      .attr("offset", `${(x(d.wavelength) - x(350)) / graphWidth * 100}%`)
      .attr("stop-color", d.color);
  });

  const area = d3.area()
    .x(d => x(d.wavelength))
    .y0(graphHeight)
    .y1(d => y(d.value))
    .curve(d3.curveMonotoneX);

  g.append("path")
    .datum(dataPairs)
    .attr("fill", `url(#${gradientId})`)
    .attr("stroke", "black")
    .attr("stroke-width", 1)
    .attr("d", area);

  g.append("g")
    .attr("transform", `translate(0,${graphHeight})`)
    .call(d3.axisBottom(x).tickValues(d3.range(350, 801, 50)).tickFormat(d => d + " nm"));

  g.append("g")
    .call(d3.axisLeft(y));

  svg.append("text")
    .attr("x", width / 2)
    .attr("y", height - 5)
    .attr("text-anchor", "middle")
    .style("font-size", "12px")
    .text("Wavelength (nm)");

  // svg.append("text")
  //   .attr("x", width / 2)
  //   .attr("y", 20)
  //   .attr("text-anchor", "middle")
  //   .style("font-size", "16px")
  //   .style("font-weight", "bold")
  //   .text(title);
}

// ----- Data Processing -----

function dataProcessing(className) {
  const waveEl = document.querySelector(className);
  const waveData = waveEl.getAttribute('data-wave');
  const luxContribConst = 684;
  const ppfdContribConst = 8359 * 0.000000001;

  document.querySelector('#data').classList.remove('none');

  const VlambdaCIE1931 = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.000039, 0.0000428264, 0.0000469146, 0.0000515896, 0.0000571764, 0.000064, 0.00007234421, 0.00008221224, 0.00009350816, 0.0001061361, 0.00012, 0.000134984, 0.000151492, 0.000170208, 0.000191816, 0.000217, 0.0002469067, 0.00028124, 0.00031852, 0.0003572667, 0.000396, 0.0004337147, 0.000473024, 0.000517876, 0.0005722187, 0.00064, 0.00072456, 0.0008255, 0.00094116, 0.00106988, 0.00121, 0.001362091, 0.001530752, 0.001720368, 0.001935323, 0.00218, 0.0024548, 0.002764, 0.0031178, 0.0035264, 0.004, 0.00454624, 0.00515932, 0.00582928, 0.00654616, 0.0073, 0.008086507, 0.00890872, 0.00976768, 0.01066443, 0.0116, 0.01257317, 0.01358272, 0.01462968, 0.01571509, 0.01684, 0.01800736, 0.01921448, 0.02045392, 0.02171824, 0.023, 0.02429461, 0.02561024, 0.02695857, 0.02835125, 0.0298, 0.03131083, 0.03288368, 0.03452112, 0.03622571, 0.038, 0.03984667, 0.041768, 0.043766, 0.04584267, 0.048, 0.05024368, 0.05257304, 0.05498056, 0.05745872, 0.06, 0.06260197, 0.06527752, 0.06804208, 0.07091109, 0.0739, 0.077016, 0.0802664, 0.0836668, 0.0872328, 0.09098, 0.09491755, 0.09904584, 0.1033674, 0.1078846, 0.1126, 0.117532, 0.1226744, 0.1279928, 0.1334528, 0.13902, 0.1446764, 0.1504693, 0.1564619, 0.1627177, 0.1693, 0.1762431, 0.1835581, 0.1912735, 0.199418, 0.20802, 0.2171199, 0.2267345, 0.2368571, 0.2474812, 0.2586, 0.2701849, 0.2822939, 0.2950505, 0.308578, 0.323, 0.3384021, 0.3546858, 0.3716986, 0.3892875, 0.4073, 0.4256299, 0.4443096, 0.4633944, 0.4829395, 0.503, 0.5235693, 0.544512, 0.56569, 0.5869653, 0.6082, 0.6293456, 0.6503068, 0.6708752, 0.6908424, 0.71, 0.7281852, 0.7454636, 0.7619694, 0.7778368, 0.7932, 0.8081104, 0.8224962, 0.8363068, 0.8494916, 0.862, 0.8738108, 0.8849624, 0.8954936, 0.9054432, 0.9148501, 0.9237348, 0.9320924, 0.9399226, 0.9472252, 0.954, 0.9602561, 0.9660074, 0.9712606, 0.9760225, 0.9803, 0.9840924, 0.9874182, 0.9903128, 0.9928116, 0.9949501, 0.9967108, 0.9980983, 0.999112, 0.9997482, 1, 0.9998567, 0.9993046, 0.9983255, 0.9968987, 0.995, 0.9926005, 0.9897426, 0.9864444, 0.9827241, 0.9786, 0.9740837, 0.9691712, 0.9638568, 0.9581349, 0.952, 0.9454504, 0.9384992, 0.9311628, 0.9234576, 0.9154, 0.9070064, 0.8982772, 0.8892048, 0.8797816, 0.87, 0.8598613, 0.849392, 0.838622, 0.8275813, 0.8163, 0.8047947, 0.793082, 0.781192, 0.7691547, 0.757, 0.7447541, 0.7324224, 0.7200036, 0.7074965, 0.6949, 0.6822192, 0.6694716, 0.6566744, 0.6438448, 0.631, 0.6181555, 0.6053144, 0.5924756, 0.5796379, 0.5668, 0.5539611, 0.5411372, 0.5283528, 0.5156323, 0.503, 0.4904688, 0.4780304, 0.4656776, 0.4534032, 0.4412, 0.42908, 0.417036, 0.405032, 0.393032, 0.381, 0.3689184, 0.3568272, 0.3447768, 0.3328176, 0.321, 0.3093381, 0.2978504, 0.2865936, 0.2756245, 0.265, 0.2547632, 0.2448896, 0.2353344, 0.2260528, 0.217, 0.2081616, 0.1995488, 0.1911552, 0.1829744, 0.175, 0.1672235, 0.1596464, 0.1522776, 0.1451259, 0.1382, 0.1315003, 0.1250248, 0.1187792, 0.1127691, 0.107, 0.1014762, 0.09618864, 0.09112296, 0.08626485, 0.0816, 0.07712064, 0.07282552, 0.06871008, 0.06476976, 0.061, 0.05739621, 0.05395504, 0.05067376, 0.04754965, 0.04458, 0.04175872, 0.03908496, 0.03656384, 0.03420048, 0.032, 0.02996261, 0.02807664, 0.02632936, 0.02470805, 0.0232, 0.02180077, 0.02050112, 0.01928108, 0.01812069, 0.017, 0.01590379, 0.01483718, 0.01381068, 0.01283478, 0.01192, 0.01106831, 0.01027339, 0.009533311, 0.008846157, 0.00821, 0.007623781, 0.007085424, 0.006591476, 0.006138485, 0.005723, 0.005343059, 0.004995796, 0.004676404, 0.004380075, 0.004102, 0.003838453, 0.003589099, 0.003354219, 0.003134093, 0.002929, 0.002738139, 0.002559876, 0.002393244, 0.002237275, 0.002091, 0.001953587, 0.00182458, 0.00170358, 0.001590187, 0.001484, 0.001384496, 0.001291268, 0.001204092, 0.001122744, 0.001047, 0.0009765896, 0.0009111088, 0.0008501332, 0.0007932384, 0.00074, 0.0006900827, 0.00064331, 0.000599496, 0.0005584547, 0.00052, 0.0004839136, 0.0004500528, 0.0004183452, 0.0003887184, 0.0003611, 0.0003353835, 0.0003114404, 0.0002891656, 0.0002684539, 0.0002492, 0.0002313019, 0.0002146856, 0.0001992884, 0.0001850475, 0.0001719, 0.0001597781, 0.0001486044, 0.0001383016, 0.0001287925, 0.00012, 0.0001118595, 0.0001043224, 0.0000973356, 0.00009084587, 0.0000848, 0.00007914667, 0.000073858, 0.000068916, 0.00006430267, 0.00006, 0.00005598187, 0.0000522256, 0.0000487184, 0.00004544747, 0.0000424, 0.00003956104, 0.00003691512, 0.00003444868, 0.00003214816, 0.00003, 0.00002799125, 0.00002611356, 0.00002436024, 0.00002272461, 0.0000212, 0.00001977855, 0.00001845285, 0.00001721687, 0.00001606459, 0.00001499, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  ];

  // Fungsi untuk mendapatkan nilai V(λ)
  const getVlambda = (wavelength) => {
    if (wavelength < 350 || wavelength > 800) return 0;
    const index = wavelength - 350;
    return VlambdaCIE1931[index] || 0;
  };

  // Parsing data-wave menjadi array objek
  const dataPairs = waveData.split(',').map(pair => {
    const [wavelength, value] = pair.split(':');
    return {
      wavelength: parseInt(wavelength),
      ee_mwm2: parseFloat(value)
    };
  });

  // Membuat elemen tabel
  const tableWrapper = document.createElement('div');
  tableWrapper.className = 'table';

  const table = document.createElement('table');
  table.style.borderCollapse = 'collapse';

  // Header tabel
  const thead = document.createElement('thead');
  const headerRow = document.createElement('tr');
  ['Wavelength (nm)', 'E<sub>e</sub> (λ) (mW/m²)', 'E<sub>e</sub> (λ) (W/m²)', 'V(λ) CIE 1931', 'Lux Contrib.', 'PPFD Contrib.'].forEach(text => {
    const th = document.createElement('th');
    th.innerHTML = text;
    headerRow.appendChild(th);
  });
  thead.appendChild(headerRow);
  table.appendChild(thead);

  // Body tabel
  const tbody = document.createElement('tbody');
  dataPairs.forEach(item => {
    const tr = document.createElement('tr');

    // Kolom 1: Wavelength
    const tdWavelength = document.createElement('td');
    tdWavelength.textContent = item.wavelength;
    tr.appendChild(tdWavelength);

    // Kolom 2: Ee (λ) (mW/m²)
    const tdEe_mwm2 = document.createElement('td');
    tdEe_mwm2.textContent = item.ee_mwm2;
    tr.appendChild(tdEe_mwm2);

    // Kolom 3: Ee (λ) (W/m²)
    const ee_wm2 = item.ee_mwm2 / 1000;
    const tdEe_wm2 = document.createElement('td');
    tdEe_wm2.textContent = ee_wm2.toFixed(9);
    tr.appendChild(tdEe_wm2);

    // Kolom 4: V(λ) CIE 1931
    const v_lambda = getVlambda(item.wavelength);
    const tdVlambda = document.createElement('td');
    tdVlambda.textContent = v_lambda.toFixed(9);
    tr.appendChild(tdVlambda);

    // Kolom 5: Lux Contrib.
    const luxContrib = ee_wm2 * v_lambda * luxContribConst;
    const tdLuxContrib = document.createElement('td');
    tdLuxContrib.textContent = luxContrib.toFixed(9);
    tr.appendChild(tdLuxContrib);

    // Kolom 6: PPFD Contrib.
    const ppfdContrib = item.wavelength * ee_wm2 * 8370.93138 * 0.000000001;
    const tdPPFDContrib = document.createElement('td');
    tdPPFDContrib.textContent = ppfdContrib.toFixed(9);
    tr.appendChild(tdPPFDContrib);

    tbody.appendChild(tr);
  });

  table.appendChild(tbody);
  tableWrapper.appendChild(table);

  // Sisipkan tabel setelah elemen .wavelength
  dataWrapper.innerHTML = '';
  dataWrapper.appendChild(tableWrapper);

  // Hitung total Lux Contrib.
  const totalLux = dataPairs.reduce((sum, item) => {
    const ee_wm2 = item.ee_mwm2 / 1000;
    const v_lambda = getVlambda(item.wavelength);
    const lux = ee_wm2 * v_lambda * luxContribConst;
    return sum + lux;
  }, 0);

  // Hitung total PPFD Contrib. (untuk wavelength 400-700 nm saja)
  const totalPPFD = dataPairs.reduce((sum, item) => {
    if (item.wavelength >= 400 && item.wavelength <= 700) {
      const ee_wm2 = item.ee_mwm2 / 1000;
      const ppfd = item.wavelength * ee_wm2 * 8359 * 0.000001;
      return sum + ppfd; // convert ke µmol/m²/s
    }
    return sum;
  }, 0);

  // Buat elemen tabel summary
  const summaryWrapper = document.createElement('div');
  summaryWrapper.className = 'table';

  const summaryTable = document.createElement('table');
  summaryTable.style.borderCollapse = 'collapse';

  const summaryThead = document.createElement('thead');
  const summaryHeaderRow1 = document.createElement('tr');

  // Header atas
  const thEmpty = document.createElement('th');
  thEmpty.rowSpan = 2;
  summaryHeaderRow1.appendChild(thEmpty);

  const thLux = document.createElement('th');
  thLux.colSpan = 1;
  thLux.textContent = 'Lux (lx)';
  summaryHeaderRow1.appendChild(thLux);

  const thPPFD = document.createElement('th');
  thPPFD.colSpan = 1;
  thPPFD.textContent = 'PPFD (µmol/m²/s)';
  summaryHeaderRow1.appendChild(thPPFD);

  summaryThead.appendChild(summaryHeaderRow1);
  summaryTable.appendChild(summaryThead);

  const summaryTbody = document.createElement('tbody');

  // Row Value
  const trValue = document.createElement('tr');
  const tdRowValue = document.createElement('td');
  tdRowValue.textContent = 'Value';
  trValue.appendChild(tdRowValue);

  const tdLuxValue = document.createElement('td');
  tdLuxValue.textContent = totalLux.toFixed(6);
  trValue.appendChild(tdLuxValue);

  const tdPPFDValue = document.createElement('td');
  tdPPFDValue.textContent = totalPPFD.toFixed(6);
  trValue.appendChild(tdPPFDValue);

  summaryTbody.appendChild(trValue);

  // Row Converted
  const trConverted = document.createElement('tr');
  const tdRowConverted = document.createElement('td');
  tdRowConverted.textContent = 'Converted';
  trConverted.appendChild(tdRowConverted);

  const tdLuxConverted = document.createElement('td');
  tdLuxConverted.textContent = (totalLux / totalPPFD).toFixed(6);
  tdLuxConverted.classList.add('lux-converted');
  trConverted.appendChild(tdLuxConverted);

  const tdPPFDConverted = document.createElement('td');
  tdPPFDConverted.textContent = (totalPPFD / totalLux).toFixed(9);
  tdPPFDConverted.classList.add('ppfd-converted');
  trConverted.appendChild(tdPPFDConverted);

  summaryTbody.appendChild(trConverted);

  summaryTable.appendChild(summaryTbody);
  summaryWrapper.appendChild(summaryTable);

  // Sisipkan tabel summary setelah tabel spektrum
  tableWrapper.insertAdjacentElement('afterend', summaryWrapper);

  // Converter

  document.querySelector('#lux-to-ppfd-lux').addEventListener('input', function () {
    const luxValue = parseFloat(this.value);
    const conversionFactor = (totalPPFD / totalLux);
    // const conversionFactor = parseFloat(document.querySelector('.ppfd-converted').textContent);
    document.querySelector('#lux-to-ppfd-ppfd').value = (luxValue * conversionFactor);
  });

  document.querySelector('#ppfd-to-lux-ppfd').addEventListener('input', function () {
    const ppfdValue = parseFloat(this.value);
    const reverseConversionFactor = (totalLux / totalPPFD);
    // const reverseConversionFactor = parseFloat(document.querySelector('.lux-converted').textContent);
    document.querySelector('#ppfd-to-lux-lux').value = (ppfdValue * reverseConversionFactor);
  });

};